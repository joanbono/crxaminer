<div class="min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900">
  <div class="max-w-7xl w-full mx-auto px-4 sm:px-6 lg:px-8 py-8 flex-grow overflow-y-auto">
    <!-- Logo and navigation -->
    <div class="flex justify-center mb-8">
      <%= render "shared/logo" %>
    </div>

    <div class="w-full bg-gray-100 dark:bg-gray-900 py-2 text-center mb-8">
      <span class="space-x-4">
        <%= link_to "[ new scan ]", root_path, class: "text-gray-600 dark:text-gray-400 hover:text-purple-500 dark:hover:text-purple-400" %>
        <%= link_to "[ statistics ]", stats_scan_index_path, class: "text-gray-600 dark:text-gray-400 hover:text-purple-500 dark:hover:text-purple-400" %>
        <%= link_to "[ github ]", "https://github.com/markkcc/crxaminer", target: "_blank", class: "text-gray-600 dark:text-gray-400 hover:text-purple-500 dark:hover:text-purple-400" %>
        <%= link_to "[ twitter ]", "https://x.com/CRXaminer", target: "_blank", class: "text-gray-600 dark:text-gray-400 hover:text-purple-500 dark:hover:text-purple-400" %>
      </span>
    </div>

    <!-- Analysis Status -->
    <div id="analysis_status">
      <% if @extension_id && (!ScanResult.exists?(extension_id: @extension_id) || params[:force] == 'true') %>
        <%= render "loading_status", message: "Starting analysis..." %>
      <% end %>
    </div>

    <!-- Results container -->
    <div id="analysis_results" class="mt-4">
      <% if @scan_result %>
        <%= render "results" %>
      <% end %>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Only check for loading bar elements if we're starting a new scan
        const isNewScan = <%= @extension_id && (!ScanResult.exists?(extension_id: @extension_id) || params[:force] == 'true') %>;
        const isForceRefresh = '<%= params[:force] %>' === 'true';
        
        console.log('Is new scan:', isNewScan);
        console.log('Is force refresh:', isForceRefresh);
        console.log('Just completed flag:', sessionStorage.getItem('justCompleted'));
        
        // Clear the flag if we're not doing a force refresh
        if (!isForceRefresh) {
          sessionStorage.removeItem('justCompleted');
        }
        
        if (isNewScan || isForceRefresh) {
          const progressBar = document.getElementById('progress-bar');
          const progressMessage = document.getElementById('progress-message');
          const analysisStatus = document.getElementById('analysis_status');
          const analysisResults = document.getElementById('analysis_results');

          // Check if we need to start analysis
          if (!progressBar || !progressMessage || !analysisStatus || !analysisResults) {
            console.log('Loading bar elements not found, skipping analysis');
            return;
          }

          // If this is a force refresh and we've just completed, don't start again
          if (isForceRefresh && sessionStorage.getItem('justCompleted')) {
            console.log('Force refresh just completed, clearing flag and skipping analysis');
            sessionStorage.removeItem('justCompleted');
            return;
          }

          console.log('Starting analysis for extension:', '<%= @extension_id %>');

          const messages = [
            'Starting analysis...',
            'Fetching extension details...',
            'Downloading extension...',
            'Analyzing permissions...',
            'Checking security...',
            'Finalizing analysis...'
          ];
          let currentProgress = 0;
          let messageIndex = 0;

          // Update progress every 300ms
          const progressInterval = setInterval(() => {
            if (currentProgress < 90) {
              currentProgress += Math.random() * 15;
              currentProgress = Math.min(currentProgress, 90);
              progressBar.style.width = currentProgress + '%';
              
              // Update message periodically
              if (currentProgress > (messageIndex + 1) * 15 && messageIndex < messages.length - 1) {
                messageIndex++;
                progressMessage.textContent = messages[messageIndex];
              }
            }
          }, 300);

          // Start the analysis immediately
          fetch('/scan/analyze?id=<%= @extension_id %>&force=<%= params[:force] %>', {
            headers: {
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'same-origin'
          })
          .then(response => {
            if (!response.ok) {
              return response.json().then(data => {
                throw new Error(data.error || 'Analysis failed');
              });
            }
            return response.json();
          })
          .then(data => {
            if (data.error) {
              throw new Error(data.error);
            }
            
            // Complete the progress bar
            clearInterval(progressInterval);
            progressBar.style.width = '100%';
            progressMessage.textContent = 'Analysis complete!';
            
            // Set flag before reloading
            sessionStorage.setItem('justCompleted', 'true');
            
            // Short delay before reloading
            setTimeout(() => {
              // Remove force parameter from URL when reloading
              const url = new URL(window.location.href);
              url.searchParams.delete('force');
              window.location.href = url.toString();
            }, 500);
          })
          .catch(error => {
            console.error('Analysis failed:', error);
            clearInterval(progressInterval);
            showError(error.message);
          });
        }
      });

      function showError(message) {
        // Hide the loading status
        const analysisStatus = document.getElementById('analysis_status');
        if (analysisStatus) {
          analysisStatus.style.display = 'none';
        }
        
        // Show error message with link to go back
        const analysisResults = document.getElementById('analysis_results');
        if (analysisResults) {
          analysisResults.innerHTML = `
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
              <div class="text-center">
                <div class="text-red-500 mb-4">${message}</div>
                <div class="text-gray-600 dark:text-gray-400">
                  Please check the extension ID and try again or 
                  <a href="/" class="text-[#9370DB] hover:text-[#7851c5] underline">return to home</a>
                </div>
              </div>
            </div>
          `;
        }
      }
    </script>
  </div>
</div>

<% content_for :page_scripts do %>
  <script>
    function initializeUrlsPagination() {
      // // Check if we're coming from a completed analysis
      // if (!sessionStorage.getItem('justCompleted')) {
      //   console.log('Skipping pagination initialization until page refresh');
      //   return;
      // }
      
      // // Clear the flag
      // sessionStorage.removeItem('justCompleted');
      
      const container = document.getElementById('embedded-urls-container');
      if (!container) {
        console.log('No pagination container found, trying again in 1000ms');
        setTimeout(initializeUrlsPagination, 1000);
        return;
      }

      const urls = JSON.parse(container.dataset.urls);

      const tbody = document.getElementById('embedded-urls-tbody');
      const currentPageEl = document.getElementById('current-page');
      const prevButton = document.getElementById('prev-page');
      const nextButton = document.getElementById('next-page');
      
      const ROWS_PER_PAGE = 40;
      const URLS_PER_ROW = 2;
      const URLS_PER_PAGE = ROWS_PER_PAGE * URLS_PER_ROW;
      const totalPages = Math.ceil(urls.length / URLS_PER_PAGE);
      let currentPage = 1;

      if (totalPages === 1) return;

      function updateTable() {
        const startIdx = (currentPage - 1) * URLS_PER_PAGE;
        const endIdx = startIdx + URLS_PER_PAGE;
        const pageUrls = urls.slice(startIdx, endIdx);

        // Clear existing rows
        tbody.innerHTML = '';
        
        // Create new rows
        for (let i = 0; i < pageUrls.length; i += URLS_PER_ROW) {
          const row = document.createElement('tr');
          row.className = 'border-t dark:border-gray-700';
          
          for (let j = 0; j < URLS_PER_ROW; j++) {
            const cell = document.createElement('td');
            cell.className = 'w-1/3 px-4 py-2 text-gray-600 dark:text-gray-300 truncate';
            const url = pageUrls[i + j];
            cell.textContent = url || '';
            row.appendChild(cell);
          }
          
          tbody.appendChild(row);
        }

        // Update UI state
        currentPageEl.textContent = currentPage;
        
        // Handle prev button
        if (currentPage === 1) {
          prevButton.classList.add('hidden');
          prevButton.disabled = true;
        } else {
          prevButton.classList.remove('hidden');
          prevButton.disabled = false;
        }

        // Handle next button
        if (currentPage === totalPages) {
          nextButton.classList.add('hidden');
          nextButton.disabled = true;
        } else {
          nextButton.classList.remove('hidden');
          nextButton.disabled = false;
        }
      }

      // Add event listeners
      prevButton?.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          updateTable();
        }
      });

      nextButton?.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          updateTable();
        }
      });

      // Initialize the table
      updateTable();
    }

    // Listen for both initial load and Turbo navigation
    document.addEventListener('DOMContentLoaded', initializeUrlsPagination);
    document.addEventListener('turbo:load', initializeUrlsPagination);
    document.addEventListener('turbo:render', initializeUrlsPagination);
  </script>
<% end %>

